
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  email: 'email',
  password: 'password',
  joinDate: 'joinDate',
  jobapplied: 'jobapplied',
  status: 'status',
  mobile: 'mobile',
  workStatus: 'workStatus',
  heading: 'heading',
  keySkills: 'keySkills'
};

exports.Prisma.AppliedjobScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobsId: 'jobsId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  position: 'position',
  city: 'city',
  state: 'state',
  experience: 'experience',
  education: 'education',
  degree: 'degree',
  university: 'university',
  graduationYear: 'graduationYear',
  resume: 'resume',
  photo: 'photo',
  coverLetter: 'coverLetter',
  portfolio: 'portfolio',
  skills: 'skills',
  availability: 'availability',
  salary: 'salary',
  appliedAt: 'appliedAt',
  status: 'status'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role'
};

exports.Prisma.AdminActivityScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  action: 'action',
  targetType: 'targetType',
  targetId: 'targetId',
  timestamp: 'timestamp'
};

exports.Prisma.PersonalDetailsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  gender: 'gender',
  maritalStatus: 'maritalStatus',
  dob: 'dob',
  category: 'category',
  differentlyAbled: 'differentlyAbled',
  careerBreak: 'careerBreak',
  address: 'address',
  hometown: 'hometown',
  pincode: 'pincode'
};

exports.Prisma.LanguageScalarFieldEnum = {
  id: 'id',
  personalDetailsId: 'personalDetailsId',
  language: 'language',
  proficiency: 'proficiency',
  read: 'read',
  write: 'write',
  speak: 'speak'
};

exports.Prisma.EducationScalarFieldEnum = {
  id: 'id',
  education: 'education',
  university: 'university',
  course: 'course',
  specialization: 'specialization',
  startingYear: 'startingYear',
  endingYear: 'endingYear',
  userId: 'userId'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  projectTitle: 'projectTitle',
  client: 'client',
  projectEmployment: 'projectEmployment',
  projectStatus: 'projectStatus',
  startYear: 'startYear',
  startMonth: 'startMonth',
  endYear: 'endYear',
  endMonth: 'endMonth',
  projectSite: 'projectSite',
  employmentNature: 'employmentNature',
  teamSize: 'teamSize',
  role: 'role',
  skills: 'skills'
};

exports.Prisma.EmployerScalarFieldEnum = {
  id: 'id',
  officialEmail: 'officialEmail',
  loginEmail: 'loginEmail',
  fullName: 'fullName',
  password: 'password',
  companyname: 'companyname',
  hiringfor: 'hiringfor',
  industry: 'industry',
  employes: 'employes',
  designation: 'designation',
  reportingmanager: 'reportingmanager',
  mobile: 'mobile',
  companyType: 'companyType',
  industryType: 'industryType',
  contactPerson: 'contactPerson',
  alias: 'alias',
  website: 'website',
  classified: 'classified',
  noOfEmployes: 'noOfEmployes',
  aboutus: 'aboutus',
  discription: 'discription',
  phone1: 'phone1',
  phone2: 'phone2',
  fax: 'fax',
  tan: 'tan',
  linkedin: 'linkedin',
  facebook: 'facebook',
  twitter: 'twitter',
  others: 'others',
  pincode: 'pincode',
  joinDate: 'joinDate',
  companyaddress: 'companyaddress',
  status: 'status'
};

exports.Prisma.JobsScalarFieldEnum = {
  id: 'id',
  jobTitle: 'jobTitle',
  companyName: 'companyName',
  location: 'location',
  salary: 'salary',
  experience: 'experience',
  jobType: 'jobType',
  skills: 'skills',
  jobDiscription: 'jobDiscription',
  requirement: 'requirement',
  responsibilities: 'responsibilities',
  benifit: 'benifit',
  posted: 'posted',
  openings: 'openings',
  status: 'status',
  Department: 'Department',
  employerId: 'employerId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  fullName: 'fullName',
  email: 'email',
  password: 'password',
  status: 'status',
  mobile: 'mobile',
  workStatus: 'workStatus',
  heading: 'heading',
  keySkills: 'keySkills'
};

exports.Prisma.appliedjobOrderByRelevanceFieldEnum = {
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  position: 'position',
  city: 'city',
  state: 'state',
  experience: 'experience',
  education: 'education',
  degree: 'degree',
  university: 'university',
  resume: 'resume',
  photo: 'photo',
  coverLetter: 'coverLetter',
  portfolio: 'portfolio',
  skills: 'skills',
  availability: 'availability',
  status: 'status'
};

exports.Prisma.adminOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role'
};

exports.Prisma.AdminActivityOrderByRelevanceFieldEnum = {
  action: 'action',
  targetType: 'targetType'
};

exports.Prisma.PersonalDetailsOrderByRelevanceFieldEnum = {
  gender: 'gender',
  maritalStatus: 'maritalStatus',
  dob: 'dob',
  category: 'category',
  differentlyAbled: 'differentlyAbled',
  careerBreak: 'careerBreak',
  address: 'address',
  hometown: 'hometown',
  pincode: 'pincode'
};

exports.Prisma.LanguageOrderByRelevanceFieldEnum = {
  language: 'language',
  proficiency: 'proficiency'
};

exports.Prisma.EducationOrderByRelevanceFieldEnum = {
  education: 'education',
  university: 'university',
  course: 'course',
  specialization: 'specialization',
  startingYear: 'startingYear',
  endingYear: 'endingYear'
};

exports.Prisma.ProjectOrderByRelevanceFieldEnum = {
  projectTitle: 'projectTitle',
  client: 'client',
  projectEmployment: 'projectEmployment',
  projectStatus: 'projectStatus',
  startYear: 'startYear',
  startMonth: 'startMonth',
  endYear: 'endYear',
  endMonth: 'endMonth',
  projectSite: 'projectSite',
  employmentNature: 'employmentNature',
  role: 'role',
  skills: 'skills'
};

exports.Prisma.EmployerOrderByRelevanceFieldEnum = {
  officialEmail: 'officialEmail',
  loginEmail: 'loginEmail',
  fullName: 'fullName',
  password: 'password',
  companyname: 'companyname',
  hiringfor: 'hiringfor',
  industry: 'industry',
  designation: 'designation',
  reportingmanager: 'reportingmanager',
  mobile: 'mobile',
  companyType: 'companyType',
  industryType: 'industryType',
  contactPerson: 'contactPerson',
  alias: 'alias',
  website: 'website',
  classified: 'classified',
  noOfEmployes: 'noOfEmployes',
  aboutus: 'aboutus',
  discription: 'discription',
  phone1: 'phone1',
  phone2: 'phone2',
  fax: 'fax',
  tan: 'tan',
  linkedin: 'linkedin',
  facebook: 'facebook',
  twitter: 'twitter',
  others: 'others',
  companyaddress: 'companyaddress',
  status: 'status'
};

exports.Prisma.JobsOrderByRelevanceFieldEnum = {
  jobTitle: 'jobTitle',
  companyName: 'companyName',
  location: 'location',
  salary: 'salary',
  jobType: 'jobType',
  skills: 'skills',
  jobDiscription: 'jobDiscription',
  requirement: 'requirement',
  responsibilities: 'responsibilities',
  benifit: 'benifit',
  status: 'status',
  Department: 'Department'
};


exports.Prisma.ModelName = {
  User: 'User',
  appliedjob: 'appliedjob',
  admin: 'admin',
  AdminActivity: 'AdminActivity',
  PersonalDetails: 'PersonalDetails',
  Language: 'Language',
  Education: 'Education',
  Project: 'Project',
  Employer: 'Employer',
  Jobs: 'Jobs'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
